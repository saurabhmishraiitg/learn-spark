{
  "paragraphs": [
    {
      "text": "import org.apache.spark.rdd.RDD\nimport org.apache.spark.graphx._\n// Define the vertices.\nval vertices = Array((1L, (\"Santa Monica\",\"CA\")),(2L,(\"Marina Del Rey\",\"CA\")),(3L, (\"Glendale\",\"CA\")),(4L, (\"Pasadena\",\"CA\")))\nval vRDD = sc.parallelize(vertices)\n// Define the edges.\nval edges = Array(Edge(1L,2L,5),Edge(1L,3L,24),Edge(2L,3L,28),Edge(3L,4L,9),Edge(4L,3L,9))\nval eRDD = sc.parallelize(edges)\n// Create a property graph.\nval graph = Graph(vRDD,eRDD)\ngraph.vertices.collect.foreach(println)\n\ngraph.edges.collect.foreach(println)\n\n//Return the number of vertices.\nval numCities = graph.numVertices\n// Return the number of edges.\nval numRoutes = graph.numEdges\n\n// Return the number of ingoing edges for each vertex.\ngraph.inDegrees.collect.foreach(println)\n\n// Return the number of outgoing edges for each vertex.\ngraph.outDegrees.collect.foreach(println)\n\n\n// Return all routes that is less than 20 miles.\ngraph.edges.filter{ case Edge(src, dst, prop) => prop < 20 }.collect.foreach(println)\n\n// The EdgeTriplet class includes the source and destination attributes.\ngraph.triplets.collect.foreach(println)\n\n// Sort by farthest route.\ngraph.triplets.sortBy(_.attr, ascending=false).collect.foreach(println)\n\n// mapVertices applies a user-specified function to every vertex.\nval newGraph = graph.mapVertices((vertexID,state) => \"TX\")\nnewGraph.vertices.collect.foreach(println)\n\n// mapEdges applies a user-specified function to every edge.\nval newGraph2 = graph.mapEdges((edge) => \"500\")\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-26T16:03:49+0530",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(4,(Pasadena,CA))\n(1,(Santa Monica,CA))\n(3,(Glendale,CA))\n(2,(Marina Del Rey,CA))\nEdge(1,2,5)\nEdge(1,3,24)\nEdge(2,3,28)\nEdge(3,4,9)\nEdge(4,3,9)\n(4,1)\n(3,3)\n(2,1)\n(4,1)\n(1,2)\n(3,1)\n(2,1)\nEdge(1,2,5)\nEdge(3,4,9)\nEdge(4,3,9)\n((1,(Santa Monica,CA)),(2,(Marina Del Rey,CA)),5)\n((1,(Santa Monica,CA)),(3,(Glendale,CA)),24)\n((2,(Marina Del Rey,CA)),(3,(Glendale,CA)),28)\n((3,(Glendale,CA)),(4,(Pasadena,CA)),9)\n((4,(Pasadena,CA)),(3,(Glendale,CA)),9)\n((2,(Marina Del Rey,CA)),(3,(Glendale,CA)),28)\n((1,(Santa Monica,CA)),(3,(Glendale,CA)),24)\n((3,(Glendale,CA)),(4,(Pasadena,CA)),9)\n((4,(Pasadena,CA)),(3,(Glendale,CA)),9)\n((1,(Santa Monica,CA)),(2,(Marina Del Rey,CA)),5)\n(4,TX)\n(1,TX)\n(3,TX)\n(2,TX)\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.graphx._\n\u001b[1m\u001b[34mvertices\u001b[0m: \u001b[1m\u001b[32mArray[(Long, (String, String))]\u001b[0m = Array((1,(Santa Monica,CA)), (2,(Marina Del Rey,CA)), (3,(Glendale,CA)), (4,(Pasadena,CA)))\n\u001b[1m\u001b[34mvRDD\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(Long, (String, String))]\u001b[0m = ParallelCollectionRDD[0] at parallelize at <console>:29\n\u001b[1m\u001b[34medges\u001b[0m: \u001b[1m\u001b[32mArray[org.apache.spark.graphx.Edge[Int]]\u001b[0m = Array(Edge(1,2,5), Edge(1,3,24), Edge(2,3,28), Edge(3,4,9), Edge(4,3,9))\n\u001b[1m\u001b[34meRDD\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Int]]\u001b[0m = ParallelCollectionRDD[1] at parallelize at <console>:32\n\u001b[1m\u001b[34mgraph\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.graphx.Graph[(String, String),Int]\u001b[0m = org.apache.spark.graphx.impl.GraphImpl@69b1..."
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1590488313090_-132023675",
      "id": "paragraph_1590488313090_-132023675",
      "dateCreated": "2020-05-26T15:48:33+0530",
      "dateStarted": "2020-05-26T16:03:49+0530",
      "dateFinished": "2020-05-26T16:03:51+0530",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:27586"
    },
    {
      "text": "val dynamicPageRanks = graph.pageRank(0.001).vertices\nval sortedRanks = dynamicPageRanks.sortBy(_._2,ascending=false)\nsortedRanks.collect.foreach(println)",
      "user": "anonymous",
      "dateUpdated": "2020-05-26T16:04:12+0530",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(3,1.8845795504535865)\n(4,1.7507334787248419)\n(2,0.21430059110133595)\n(1,0.15038637972023575)\n\u001b[1m\u001b[34mdynamicPageRanks\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.graphx.VertexRDD[Double]\u001b[0m = VertexRDDImpl[707] at RDD at VertexRDD.scala:57\n\u001b[1m\u001b[34msortedRanks\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId, Double)]\u001b[0m = MapPartitionsRDD[716] at sortBy at <console>:30\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1590488918603_1700125571",
      "id": "paragraph_1590488918603_1700125571",
      "dateCreated": "2020-05-26T15:58:38+0530",
      "dateStarted": "2020-05-26T16:04:12+0530",
      "dateFinished": "2020-05-26T16:04:16+0530",
      "status": "FINISHED",
      "$$hashKey": "object:27587"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-05-26T16:04:12+0530",
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1590489252393_188219511",
      "id": "paragraph_1590489252393_188219511",
      "dateCreated": "2020-05-26T16:04:12+0530",
      "status": "READY",
      "$$hashKey": "object:27588"
    }
  ],
  "name": "Graph Frames",
  "id": "2F9U4KD89",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Graph Frames"
}